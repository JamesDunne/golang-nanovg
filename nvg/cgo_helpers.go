// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Thu, 11 Jan 2018 09:58:29 CST.
// By https://git.io/c-for-go. DO NOT EDIT.

package nvg

/*
#cgo LDFLAGS: -lm -lGLESv2 -L/opt/vc/lib
#cgo CFLAGS: -I/opt/vc/include
#include "nanovg.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *Context) Ref() *C.NVGcontext {
	if x == nil {
		return nil
	}
	return (*C.NVGcontext)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Context) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewContextRef converts the C object reference into a raw struct reference without wrapping.
func NewContextRef(ref unsafe.Pointer) *Context {
	return (*Context)(ref)
}

// NewContext allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewContext() *Context {
	return (*Context)(allocContextMemory(1))
}

// allocContextMemory allocates memory for type C.NVGcontext in C.
// The caller is responsible for freeing the this memory via C.free.
func allocContextMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfContextValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfContextValue = unsafe.Sizeof([1]C.NVGcontext{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Context) PassRef() *C.NVGcontext {
	if x == nil {
		x = (*Context)(allocContextMemory(1))
	}
	return (*C.NVGcontext)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Color) Ref() *C.NVGcolor {
	if x == nil {
		return nil
	}
	return (*C.NVGcolor)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Color) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewColorRef converts the C object reference into a raw struct reference without wrapping.
func NewColorRef(ref unsafe.Pointer) *Color {
	return (*Color)(ref)
}

// NewColor allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewColor() *Color {
	return (*Color)(allocColorMemory(1))
}

// allocColorMemory allocates memory for type C.NVGcolor in C.
// The caller is responsible for freeing the this memory via C.free.
func allocColorMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfColorValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfColorValue = unsafe.Sizeof([1]C.NVGcolor{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Color) PassRef() *C.NVGcolor {
	if x == nil {
		x = (*Color)(allocColorMemory(1))
	}
	return (*C.NVGcolor)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Paint) Ref() *C.NVGpaint {
	if x == nil {
		return nil
	}
	return (*C.NVGpaint)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Paint) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewPaintRef converts the C object reference into a raw struct reference without wrapping.
func NewPaintRef(ref unsafe.Pointer) *Paint {
	return (*Paint)(ref)
}

// NewPaint allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewPaint() *Paint {
	return (*Paint)(allocPaintMemory(1))
}

// allocPaintMemory allocates memory for type C.NVGpaint in C.
// The caller is responsible for freeing the this memory via C.free.
func allocPaintMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfPaintValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfPaintValue = unsafe.Sizeof([1]C.NVGpaint{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Paint) PassRef() *C.NVGpaint {
	if x == nil {
		x = (*Paint)(allocPaintMemory(1))
	}
	return (*C.NVGpaint)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *CompositeOperationState) Ref() *C.NVGcompositeOperationState {
	if x == nil {
		return nil
	}
	return (*C.NVGcompositeOperationState)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *CompositeOperationState) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewCompositeOperationStateRef converts the C object reference into a raw struct reference without wrapping.
func NewCompositeOperationStateRef(ref unsafe.Pointer) *CompositeOperationState {
	return (*CompositeOperationState)(ref)
}

// NewCompositeOperationState allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewCompositeOperationState() *CompositeOperationState {
	return (*CompositeOperationState)(allocCompositeOperationStateMemory(1))
}

// allocCompositeOperationStateMemory allocates memory for type C.NVGcompositeOperationState in C.
// The caller is responsible for freeing the this memory via C.free.
func allocCompositeOperationStateMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfCompositeOperationStateValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfCompositeOperationStateValue = unsafe.Sizeof([1]C.NVGcompositeOperationState{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *CompositeOperationState) PassRef() *C.NVGcompositeOperationState {
	if x == nil {
		x = (*CompositeOperationState)(allocCompositeOperationStateMemory(1))
	}
	return (*C.NVGcompositeOperationState)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *GlyphPosition) Ref() *C.NVGglyphPosition {
	if x == nil {
		return nil
	}
	return (*C.NVGglyphPosition)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *GlyphPosition) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewGlyphPositionRef converts the C object reference into a raw struct reference without wrapping.
func NewGlyphPositionRef(ref unsafe.Pointer) *GlyphPosition {
	return (*GlyphPosition)(ref)
}

// NewGlyphPosition allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewGlyphPosition() *GlyphPosition {
	return (*GlyphPosition)(allocGlyphPositionMemory(1))
}

// allocGlyphPositionMemory allocates memory for type C.NVGglyphPosition in C.
// The caller is responsible for freeing the this memory via C.free.
func allocGlyphPositionMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfGlyphPositionValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfGlyphPositionValue = unsafe.Sizeof([1]C.NVGglyphPosition{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *GlyphPosition) PassRef() *C.NVGglyphPosition {
	if x == nil {
		x = (*GlyphPosition)(allocGlyphPositionMemory(1))
	}
	return (*C.NVGglyphPosition)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *TextRow) Ref() *C.NVGtextRow {
	if x == nil {
		return nil
	}
	return (*C.NVGtextRow)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *TextRow) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewTextRowRef converts the C object reference into a raw struct reference without wrapping.
func NewTextRowRef(ref unsafe.Pointer) *TextRow {
	return (*TextRow)(ref)
}

// NewTextRow allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewTextRow() *TextRow {
	return (*TextRow)(allocTextRowMemory(1))
}

// allocTextRowMemory allocates memory for type C.NVGtextRow in C.
// The caller is responsible for freeing the this memory via C.free.
func allocTextRowMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfTextRowValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfTextRowValue = unsafe.Sizeof([1]C.NVGtextRow{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *TextRow) PassRef() *C.NVGtextRow {
	if x == nil {
		x = (*TextRow)(allocTextRowMemory(1))
	}
	return (*C.NVGtextRow)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Scissoring) Ref() *C.NVGscissor {
	if x == nil {
		return nil
	}
	return (*C.NVGscissor)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Scissoring) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewScissoringRef converts the C object reference into a raw struct reference without wrapping.
func NewScissoringRef(ref unsafe.Pointer) *Scissoring {
	return (*Scissoring)(ref)
}

// NewScissoring allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewScissoring() *Scissoring {
	return (*Scissoring)(allocScissoringMemory(1))
}

// allocScissoringMemory allocates memory for type C.NVGscissor in C.
// The caller is responsible for freeing the this memory via C.free.
func allocScissoringMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfScissoringValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfScissoringValue = unsafe.Sizeof([1]C.NVGscissor{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Scissoring) PassRef() *C.NVGscissor {
	if x == nil {
		x = (*Scissoring)(allocScissoringMemory(1))
	}
	return (*C.NVGscissor)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Vertex) Ref() *C.NVGvertex {
	if x == nil {
		return nil
	}
	return (*C.NVGvertex)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Vertex) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewVertexRef converts the C object reference into a raw struct reference without wrapping.
func NewVertexRef(ref unsafe.Pointer) *Vertex {
	return (*Vertex)(ref)
}

// NewVertex allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewVertex() *Vertex {
	return (*Vertex)(allocVertexMemory(1))
}

// allocVertexMemory allocates memory for type C.NVGvertex in C.
// The caller is responsible for freeing the this memory via C.free.
func allocVertexMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfVertexValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfVertexValue = unsafe.Sizeof([1]C.NVGvertex{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Vertex) PassRef() *C.NVGvertex {
	if x == nil {
		x = (*Vertex)(allocVertexMemory(1))
	}
	return (*C.NVGvertex)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Path) Ref() *C.NVGpath {
	if x == nil {
		return nil
	}
	return (*C.NVGpath)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Path) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewPathRef converts the C object reference into a raw struct reference without wrapping.
func NewPathRef(ref unsafe.Pointer) *Path {
	return (*Path)(ref)
}

// NewPath allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewPath() *Path {
	return (*Path)(allocPathMemory(1))
}

// allocPathMemory allocates memory for type C.NVGpath in C.
// The caller is responsible for freeing the this memory via C.free.
func allocPathMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfPathValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfPathValue = unsafe.Sizeof([1]C.NVGpath{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Path) PassRef() *C.NVGpath {
	if x == nil {
		x = (*Path)(allocPathMemory(1))
	}
	return (*C.NVGpath)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Params) Ref() *C.NVGparams {
	if x == nil {
		return nil
	}
	return (*C.NVGparams)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Params) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewParamsRef converts the C object reference into a raw struct reference without wrapping.
func NewParamsRef(ref unsafe.Pointer) *Params {
	return (*Params)(ref)
}

// NewParams allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewParams() *Params {
	return (*Params)(allocParamsMemory(1))
}

// allocParamsMemory allocates memory for type C.NVGparams in C.
// The caller is responsible for freeing the this memory via C.free.
func allocParamsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfParamsValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfParamsValue = unsafe.Sizeof([1]C.NVGparams{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Params) PassRef() *C.NVGparams {
	if x == nil {
		x = (*Params)(allocParamsMemory(1))
	}
	return (*C.NVGparams)(unsafe.Pointer(x))
}

// safeString ensures that the string is NULL-terminated, a NULL-terminated copy is created otherwise.
func safeString(str string) string {
	if len(str) > 0 && str[len(str)-1] != '\x00' {
		str = str + "\x00"
	} else if len(str) == 0 {
		str = "\x00"
	}
	return str
}

// unpackPCharString represents the data from Go string as *C.char and avoids copying.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	str = safeString(str)
	h := (*stringHeader)(unsafe.Pointer(&str))
	return (*C.char)(unsafe.Pointer(h.Data)), cgoAllocsUnknown
}

type stringHeader struct {
	Data uintptr
	Len  int
}

// unpackPUcharString represents the data from Go string as *C.uchar and avoids copying.
func unpackPUcharString(str string) (*C.uchar, *cgoAllocMap) {
	str = safeString(str)
	h := (*stringHeader)(unsafe.Pointer(&str))
	return (*C.uchar)(unsafe.Pointer(h.Data)), cgoAllocsUnknown
}
